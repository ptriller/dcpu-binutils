2010-02-02  Tom Tromey  <tromey@redhat.com>

	* valops.c (value_cast_structs): Try downcasting using the RTTI
	type.

2010-02-02  Tom Tromey  <tromey@redhat.com>

	* gnu-v2-abi.c: Don't include gnu-v2-abi.h.
	(gnuv2_baseclass_offset): Now static.
	* Makefile.in (HFILES_NO_SRCDIR): Remove gnu-v2-abi.h.
	* gnu-v2-abi.h: Remove.

2010-02-02  Tom Tromey  <tromey@redhat.com>

	* m2-typeprint.c (m2_record_fields): Don't use
	TYPE_DECLARED_TYPE.
	* gdbtypes.h (TYPE_DECLARED_CLASS): New macro.
	(struct main_type) <flag_declared_class>: New field.
	(struct cplus_struct_type) <declared_type>: Remove.
	<ntemplate_args>: Move earlier.
	(DECLARED_TYPE_CLASS, DECLARED_TYPE_UNION, DECLARED_TYPE_STRUCT)
	(DECLARED_TYPE_TEMPLATE): Remove.
	(TYPE_DECLARED_TYPE): Remove.
	* gdbtypes.c (lookup_union): Don't use TYPE_DECLARED_TYPE.
	* dwarf2read.c (read_structure_type): Set TYPE_DECLARED_CLASS.
	* c-typeprint.c (c_type_print_base): Use TYPE_DECLARED_CLASS, not
	TYPE_DECLARED_TYPE.

2010-02-02  Tom Tromey  <tromey@redhat.com>

	PR c++/11226, PR c++/9629, PR c++/9688, PR c++/8890:
	* valops.c (search_struct_field): Compute nbases after calling
	CHECK_TYPEDEF.
	(check_field): Call CHECK_TYPEDEF.
	* cp-valprint.c (cp_print_value): Pass correct address to
	baseclass_offset.  Fix check for virtual base past the end of the
	object.  Don't offset address passed to cp_print_value_fields or
	apply_val_pretty_printer.
	(cp_print_value_fields): Fix call to val_print.
	(cp_print_value_fields_rtti): New function.
	* c-valprint.c (c_val_print): Use cp_print_value_fields_rtti.
	* p-valprint.c (pascal_object_print_value_fields): Fix call to
	val_print.
	* python/py-prettyprint.c (apply_val_pretty_printer): Add embedded
	offset to address.
	* language.h (struct language_defn) <la_val_print>: Document.
	* c-lang.h (cp_print_value_fields_rtti): Declare.

2010-02-01  Jan Kratochvil  <jan.kratochvil@redhat.com>

	PR libc/11214:
	* linux-low.c (linux_tracefork_child) [!(__UCLIBC__ && HAS_NOMMU)]: New.
	(linux_test_for_tracefork): Move `stack' into [__UCLIBC__ && HAS_NOMMU].
	(linux_test_for_tracefork) [!(__UCLIBC__ && HAS_NOMMU)]: New.

2010-02-01  Michael Matz  <matz@suse.de>
	    Daniel Jacobowitz  <dan@codesourcery.com>

	* i386-tdep.c (i386_frame_cache): Assume valid anonymous
	functions use a frame pointer.

2010-02-01  Jan Kratochvil  <jan.kratochvil@redhat.com>

	* solib-svr4.c (scan_dyntag): New variable dyn_addr.  Replace gdb_assert
	by a conditional setting DYN_ADDR.  Use DYN_ADDR.
	* config/djgpp/fnchange.lst: Add translations for
	symbol-without-target_section.exp and symbol-without-target_section.c.

2010-02-01  Daniel Jacobowitz  <dan@codesourcery.com>

	* gdbarch.sh: Set LANG and LC_ALL to C, not c.
	(remote_breakpoint_for_pc): Correct invalid_p check.
	* gdbarch.c: Regenerated.

2010-02-01  Daniel Jacobowitz  <dan@codesourcery.com>

	* arm-tdep.c (arm_find_mapping_symbol): New function, from
	arm_pc_is_thumb.
	(arm_pc_is_thumb): Use arm_find_mapping_symbol.
	(extend_buffer_earlier): New function.
	(MAX_IT_BLOCK_PREFIX, IT_SCAN_THRESHOLD): New constants.
	(arm_adjust_breakpoint_address): New function.
	(arm_gdbarch_init): Register arm_adjust_breakpoint_address.

2010-02-01  Daniel Jacobowitz  <dan@codesourcery.com>

	* arm-linux-tdep.c (arm_linux_thumb2_be_breakpoint)
	(arm_linux_thumb2_le_breakpoint): New constants.
	(arm_linux_init_abi): Set thumb2_breakpoint and
	thumb2_breakpoint_size.
	* arm-tdep.c (thumb_insn_size, thumb_advance_itstate): New functions.
	(thumb_get_next_pc): Add a comment.  Rename IT to ITSTATE.
	Implement support for single stepping through IT blocks if
	a 32-bit Thumb breakpoint instruction is available.
	(arm_breakpoint_from_pc): If a 32-bit Thumb breakpoint instruction
	is available, use it when needed.
	(arm_remote_breakpoint_from_pc): New function.
	(arm_gdbarch_init): Register arm_remote_breakpoint_from_pc.
	* arm-tdep.h (struct gdbarch_tdep): Correct thumb_breakpoint
	comment.  Add thumb2_breakpoint and thumb2_breakpoint_size.

2010-02-01  Daniel Jacobowitz  <dan@codesourcery.com>

	* arch-utils.c (default_remote_breakpoint_from_pc): New function.
	* arch-utils.h (default_remote_breakpoint_from_pc): Declare.
	* gdbarch.c, gdbarch.h: Regenerated.
	* gdbarch.sh (remote_breakpoint_from_pc): New architecture method.
	* remote.c (remote_insert_breakpoint, remote_insert_hw_breakpoint): Use
	gdbarch_remote_breakpoint_from_pc.

2010-01-29  Daniel Jacobowitz  <dan@codesourcery.com>

	* infrun.c (prepare_to_proceed): Handle other signals which might
	match a breakpoint.
	(handle_inferior_event): Move the check for unusual breakpoint
	signals earlier.

2010-01-29  Paul Hilfinger  <hilfinger@adacore.com>

	amd64 - function returning record with field straddling 2 registers.
	* amd64-tdep.c (amd_classify_aggregate): Handle the case of
	a record of length <= 16 in which a field straddles the two
	eightbytes.

2010-01-29  Joel Brobecker  <brobecker@adacore.com>

	Implement return values on amd64-windows.
	* amd64-windows-tdep.c: #include gdbcore.h and regcache.h.
	(amd64_windows_return_value): New function.
	(amd64_windows_init_abi): Call set_gdbarch_return_value with
	amd64_windows_return_value.

2010-01-29  Joel Brobecker  <brobecker@adacore.com>

	amd64-windows: 32 bytes allocated on stack by caller for integer
	parameter registers.
	* i386-tdep.h (struct gdbarch_tdep): Add new field
	integer_param_regs_saved_in_caller_frame.
	* amd64-windows-tdep.c (amd64_windows_init_abi): Set
	tdep->integer_param_regs_saved_in_caller_frame to 1.
	* amd64-tdep.c (amd64_push_dummy_call): Allocate some memory on
	stack if tdep->integer_param_regs_saved_in_caller_frame is set.

2010-01-29  Joel Brobecker  <brobecker@adacore.com>

	amd64-windows: memory args passed by pointer during function calls.
	* i386-tdep.h (gdbarch_tdep): Add field memory_args_by_pointer.
	* amd64-tdep.c (amd64_push_arguments): Add handling of architectures
	where tdep->memory_args_by_pointer is non-zero.
	* amd64-windows-tdep.c (amd64_windows_init_abi): Set
	tdep->memory_args_by_pointer to 1.

2010-01-29  Joel Brobecker  <brobecker@adacore.com>

	amd64-windows: Integer parameters in function calls.
	* i386-tdep.h (enum amd64_reg_class): New, moved here from
	amd64-tdep.c.
	(struct gdbarch_tdep): Add fields call_dummy_num_integer_regs,
	call_dummy_integer_regs, and classify.
	* amd64-tdep.h (amd64_classify): Add declaration.
	* amd64-tdep.c (amd64_dummy_call_integer_regs): New static constant.
	(amd64_reg_class): Delete, moved to i386-tdep.h.
	(amd64_classify): Make non-static.  Move declaration to amd64-tdep.h.
	Replace call to amd64_classify by call to tdep->classify.
	(amd64_push_arguments): Get the list of registers to use for
	passing integer parameters from the gdbarch tdep structure,
	rather than using a hardcoded one.  Replace calls to amd64_classify
	by calls to tdep->classify.
	(amd64_push_dummy_call): Get the register number used for
	the "hidden" argument from tdep->call_dummy_integer_regs.
	(amd64_init_abi): Initialize tdep->call_dummy_num_integer_regs
	and tdep->call_dummy_integer_regs.  Set tdep->classify.
	* amd64-windows-tdep.c: Add include of gdbtypes.h.
	(amd64_windows_dummy_call_integer_regs): New static global.
	(amd64_windows_classify): New function.
	(amd64_windows_init_abi): Initialize tdep->call_dummy_num_integer_regs
	tdep->call_dummy_integer_regs and tdep->classify.

2010-01-28  Daniel Jacobowitz  <dan@codesourcery.com>

	* regcache.c (regcache_xmalloc): Add aspace argument.  Use it
	for the new regcache.  All callers updated.
	(regcache_cpy, regcache_cpy_no_passthrough): Do not set aspace here.
	(get_thread_arch_regcache): Do not set aspace here.
	* regcache.h (regcache_xmalloc): Update declaration.

	* frame.c, infcall.c, ppc-linux-tdep.c: Calls to
	regcache_xmalloc updated.

2010-01-28  Joel Brobecker  <brobecker@adacore.com>

	Another -Wunused-function error in procfs.c (sparc-solaris)
	* procfs.c (insert_dbx_link_breakpoint): Delete declaration.  Move up.
	Only define if SYS_syssgi is defined.
	(remove_dbx_link_breakpoint): Delete declaration.  Move up.
	(dbx_link_addr, insert_dbx_link_bpt_in_file)
	(insert_dbx_link_bpt_in_region): Move up.  Only define if SYS_syssgi
	is itself defined.

2010-01-27  Christopher Faylor  <me+cygwin@cgf.cx>

	* windows-nat.c (windows_initialization_done): New variable.
	(get_windows_debug_event): Issue error when process dies before
	completely initializing.
	(do_initial_windows_stuff): Set flag to indicate when we are done with
	the initial steps of attaching to the child.

2010-01-27  Jan Kratochvil  <jan.kratochvil@redhat.com>

	* symtab.h (struct symbol <symtab>): New comment on NULL values.

2010-01-27  Doug Evans  <dje@google.com>

	* solib-svr4.c (solib_break_names): Add __dl_rtld_db_dlactivity.

	* breakpoint.c (bpstat_stop_status): Delete useless code.

2010-01-27  Jan Kratochvil  <jan.kratochvil@redhat.com>

	* printcmd.c (display_uses_solib_p): Remove variable section.  Access
	objfile via SYMBOL_SYMTAB.

2010-01-26  Tom Tromey  <tromey@redhat.com>

	PR exp/7643:
	* eval.c (evaluate_subexp_for_address) <UNOP_IND>: Call
	coerce_array on result.

2010-01-26  Sami Wagiaalla  <swagiaal@redhat.com>

	* cp-namespace.c (cp_lookup_symbol_namespace): Added
	search_parent argument.
	(cp_add_using): Initialize 'searched' field.
	(reset_directive_searched): New function.
	* cp-support.h: Add 'searched' field to using_direct struct.
	(cp_lookup_symbol_imports): Ditto.
	* cp-namespace.c (cp_lookup_symbol_imports): Ditto.
	Perform recursive search.
	Implement non parent search.
	* valops.c (value_maybe_namespace_elt): Updated.

2010-01-26  Sami Wagiaalla  <swagiaal@redhat.com>

	PR gdb/10929:
	* dwarf2read.c (read_lexical_block_scope): Create blocks for
	scopes which contain using directives even if they contain no
	declarations.
	* symtab.c (lookup_symbol_aux): Pass lowest level block to
	la_lookup_symbol_nonlocal.
	* cp-namespace.c (cp_lookup_symbol_nonlocal): call
	cp_lookup_symbol_namespace.
	(cp_lookup_symbol_namespace): Perform an import lookup at every
	block level.
	(cp_lookup_symbol_imports): New function.
	(cp_lookup_symbol_in_namespace): New function.

2010-01-25  Tom Tromey  <tromey@redhat.com>

	PR gdb/11049:
	* c-valprint.c (c_val_print): Fix test of extract_unsigned_integer
	result.

2010-01-25  Rainer Orth  <ro@CeBiTec.Uni-Bielefeld.DE>

	* configure.ac: Only use host_os part when disabling TUI on osf.
	Use test to check variables, prefix strings with x.
	* configure: Regenerate.

	* solib-osf.c (osf_current_sos): Initialize tail.

2010-01-25  gingold  <gingold@adacore.com>

        * windows-nat.c (windows_continue): Use %x to print thread id.
        (get_windows_debug_event): Ditto.

2010-01-22  Tom Tromey  <tromey@redhat.com>

	PR symtab/11199:
	* dwarf2read.c (quirk_gcc_member_function_pointer): Change return
	type and arguments.  Use smash_to_methodptr_type.
	(read_structure_type): Call quirk_gcc_member_function_pointer
	later.
	* gdbtypes.h (smash_to_methodptr_type): Declare.
	* gdbtypes.c (smash_to_methodptr_type): New function.
	(lookup_methodptr_type): Use it.

2010-01-21  Tom Tromey  <tromey@redhat.com>

	PR symtab/11198:
	* symtab.h (lookup_minimal_symbol_and_objfile): Declare.
	* minsyms.c (lookup_minimal_symbol_and_objfile): New function.
	* glibc-tdep.c (find_minsym_and_objfile): Remove.
	(glibc_skip_solib_resolver): Use
	lookup_minimal_symbol_and_objfile.

2010-01-21  Kai Tietz  <kai.tietz@onevision.com>

	* inflow.c (check_syscall): Guard by #if clause for GO32 and
	WIN32 targets.

2010-01-20  Tom Tromey  <tromey@redhat.com>

	PR backtrace/10770:
	* valarith.c (value_binop): Handle BINOP_GTR, BINOP_LEQ, and
	BINOP_GEQ.  Handle BINOP_NOTEQUAL in the signed case.
	* dwarf2expr.c (new_dwarf_expr_context): Allocate
	dwarf_stack_values, not CORE_ADDRs.
	(execute_stack_op): Change DW_OP_div and comparison operators to
	use signed operands.

2010-01-20  Vladimir Prus  <vladimir@codesourcery.com>

	Per-inferior args and tty and environment.

	* infcmd.c (inferior_args): Rename to ...
	(inferior_args_scratch): ... this.
	(inferior_io_terminal): Rename to ...
	(inferior_io_terminal_scratch): ... this.
	(inferior_argc, inferior_argv): Remove.
	(set_inferior_io_terminal, get_inferior_io_terminal): Store
	inside current_inferior().
	(set_inferior_tty_command, show_inferior_tty_command): New.
	(get_inferior_args, set_inferior_args): Store inside
	current_inferior().
	(notice_args_set): Likewise and rename to...
	(set_args_command): ... this.
	(set_inferior_args_vector): Likewise.
	(notice_args_read): Rename to...
	(show_args_command): ...new.
	(tty_command): Remove.
	(run_command_1): Don't free old args, as they are freed by
	set_inferior_arg now.
	(run_no_args_command): Likewise.
	(inferior_environ): Remove.
	(run_command_1): Use environment of the current inferior.
	(environment_info, set_environment_command)
	(unset_environment_command, path_info, path_command): Likewise.
	(_initialize_infcmd): Adjust for function and variable renames.
	Do not init inferior_environ.
	* inferior.h (set_inferior_arg): Adjust prototype.
	(struct inferior): New fields args, argc, argv, terminal, environment.
	(inferior_environ): Remove declaration.
	* inferior.c (free_inferior): Free new fields.
	(add_inferior_silent): Initialize 'environment' field.
	* main.c (captured_main): Set arguments only after the initial
	inferior has been created.  Set set_inferior_io_terminal,
	not tty_command.
	* mi/mi-main.c (mi_cmd_env_path): Use environment of the current
	inferior.
	(_initialize_mi_cmd_env): Adjust for disappearance of global
	inferior_environ.
	* solib.c (solib_find): Use environment of the current inferior.

2010-01-20  Jan Kratochvil  <jan.kratochvil@redhat.com>

	* varobj.c (varobj_add_child, install_dynamic_child): Wrap into #if
	HAVE_PYTHON.
	(instantiate_pretty_printer): Move HAVE_PYTHON outside of the function.

2010-01-20  Joel Brobecker  <brobecker@adacore.com>

	Get rid of ada-lang.c:function_name_from_pc.
	* ada-lang.c: Add "stack.h" #include.
	(function_name_from_pc): Delete.
	(is_known_support_routine): Replace call to function_name_from_pc
	by call to find_frame_funname.
	(ada_unhandled_exception_name_addr_from_raise): Likewise.

2010-01-19  Tom Tromey  <tromey@redhat.com>

	PR c++/11026:
	* dwarf2read.c (read_partial_die): Allocate partial DIE's name on
	objfile obstack.

2010-01-19  Tom Tromey  <tromey@redhat.com>

	* top.c (stop_sig, float_handler, do_nothing): Remove.

2010-01-19  Jan Kratochvil  <jan.kratochvil@redhat.com>

	* breakpoint.c (watchpoint_check): Check the call
	gdbarch_in_function_epilogue_p before calling frame_find_by_id.
	Extend the comment.
	* config/djgpp/fnchange.lst: Add translations for 
	watchpoint-cond-gone.exp, watchpoint-cond-gone.c and
	watchpoint-cond-gone-stripped.c.

2010-01-19  Tom Tromey  <tromey@redhat.com>

	PR c++/8000:
	* dwarf2read.c (partial_die_parent_scope): Put enumeration type
	into parent scope, and enumerator into grandparent scope.

2010-01-19  Joel Brobecker  <brobecker@adacore.com>

	* NEWS: Add entry for "set/show ada trust-PAD-over-XVS" commands.

2010-01-19  Joel Brobecker  <brobecker@adacore.com>

	* configure.host: Make x86_64-*-solaris2.1[0-9]* an alias of
	i[34567]86-*-solaris2.1[0-9]*.
	* configure.tgt: Likewise.

2010-01-19  Joel Brobecker  <brobecker@adacore.com>

	* NEWS: Document the source command enhancement allowing it
	to load Python scripts. Document the "set/show script-extension"
	commands.

2010-01-19  Joel Brobecker  <brobecker@adacore.com>

	Add -Wunused-function to compile flags.
	* configure.ac: Add -Wunused-function to build_warnings.
	* configure: Regenerate.

2010-01-19  Joel Brobecker  <brobecker@adacore.com>

	"delete" ada-lex.c:input function, not used.
	* ada-lex.l: #define YY_NO_INPUT.

2010-01-19  Joel Brobecker  <brobecker@adacore.com>

	Delete free_named_symtabs and associated cleanup.
	* symfile.h (free_named_symtabs): Delete declaration.
	* symfile.c: Remove some commented out code (clear_symtab_users_once).
	(cashier_psymtab): Comment function out.
	Delete declaration.
	(free_named_symtabs): Delete.
	* coffread.c (coff_end_symtab): Remove call to free_named_symtabs.
	* dbxread.c (end_psymtab): Likewise.
	* dwarf2read.c (process_psymtab_comp_unit): Ditto.
	* exec.c (exec_close_1): Ditto.
	* xcoffread.c (xcoff_end_psymtab): Likewise.

2010-01-19  Joel Brobecker  <brobecker@adacore.com>

	* stack.c (print_block_frame_labels): Comment function out.

2010-01-19  Joel Brobecker  <brobecker@adacore.com>

	Delete unused or undefined functions.
	* breakpoint.c (ep_parse_optional_filename): Delete.
	* dcache.c (dcache_write_line): Remove declaration.
	* infrun.c (build_infrun): Remove declaration.
	* tracepoint.c (tracepoint_save_command): Remove declaration.
	* linux-nat.c (init_lwp_list): Delete. No longer used.
	* event-loop.c (check_async_signal_handlers): Delete declaration.
	* infrun.c (init_execution_control_state): Delete.
	(proceed): Update comment to avoid mentioning
	init_execution_control_state.
	* target.c (kill_or_be_killed, nosupport_runtime): Delete.
	* ada-lang.c (ada_to_static_fixed_value): Delete.
	* scm-lang.c (evaluate_subexp_scm): Delete declaration.
	* cp-namespace.c (cp_copy_usings): Delete.
	* xml-syscall.c (xml_number_of_syscalls): Delete.
	* progspace.c (find_program_space_by_num): Delete.
	* inflow.c (handle_sigio): Delete declaration.
	* hppa-tdep.c (hppa_alignof): Delete.
	* mipsnbsd-tdep.c (mipsnbsd_sigtramp_offset)
	(mipsnbsd_core_osabi_sniffer): Delete.

2010-01-18  Tom Tromey  <tromey@redhat.com>

	PR c++/9680:
	* c-exp.y (REINTERPRET_CAST, DYNAMIC_CAST, STATIC_CAST)
	(CONST_CAST): New tokens.
	(exp): Add new productions.
	(ident_tokens): Add const_cast, dynamic_cast, static_cast, and
	reinterpret_cast.
	(is_cast_operator): New function.
	(yylex): Handle cast operators specially.
	* eval.c (evaluate_subexp_standard) <UNOP_DYNAMIC_CAST,
	UNOP_REINTERPRET_CAST>: New cases.
	* expprint.c (print_subexp_standard): Likewise.
	(op_name_standard): Likewise.
	(dump_subexp_body_standard): Likewise.
	* parse.c (operator_length_standard): Likewise.
	* expression.h (enum exp_opcode): New constants UNOP_DYNAMIC_CAST,
	UNOP_REINTERPRET_CAST.
	* gdbtypes.c (class_types_same_p): New function.
	(is_ancestor): Use it.
	(is_public_ancestor): New function.
	(is_unique_ancestor_worker): Likewise.
	(is_unique_ancestor): Likewise.
	* gdbtypes.h (class_types_same_p, is_public_ancestor)
	(is_unique_ancestor): Declare.
	* valops.c (value_reinterpret_cast): New function.
	(dynamic_cast_check_1): Likewise.
	(dynamic_cast_check_2): Likewise.
	(value_dynamic_cast): Likewise.
	* value.h (value_reinterpret_cast, value_dynamic_cast): Declare.

2010-01-18  Joel Brobecker  <brobecker@adacore.com>

	Fix build failure when building without Python support.
	* python/python.c: Always include exceptions.h, even when HAVE_PYTHON
	is not defined.

2010-01-18  Joel Brobecker  <brobecker@adacore.com>

	Use XVS field type instead of doing a parallel lookup.
	* ada-lang.c (ada_get_base_type): Follow the XVS field type
	if it is a reference type instead of doing a type lookup using
	the XVS field name.

2010-01-18  Joel Brobecker  <brobecker@adacore.com>

	Trust PAD types instead of using PAD___XVS.
	* ada-lang.c (trust_pad_over_xvs): New static variable.
	(ada_is_aligner_type): If !trust_pad_over_xvs and there is a
	parallel XVS type, follow the XVS type instead of the PAD type.
	(unwrap_value): Make sure that there is no parallel XVE type
	before returning the value as is.
	(set_ada_list, show_ada_list): New static variables.
	(set_ada_command, show_ada_command): New functions.
	(_initialize_ada_language): Add new "set/show ada" prefix commands.
	Add new "set/show ada trust-PAD-over-XVS" setting.

2010-01-18  Tom Tromey  <tromey@redhat.com>
	    Thiago Jung Bauermann  <bauerman@br.ibm.com>

	Allow "source" to load python scripts.
	* exceptions.h (enum errors): Add UNSUPPORTED_ERROR.
	* python/python.c (source_python_script): New function.
	* python/python.h (source_python_script): Add declaration.
	* cli/cli-cmds.c: #include exceptions.h and python/python.h.
	(script_ext_off, script_ext_soft, script_ext_strict)
	(script_ext_enums, script_ext_mode): New static constants.
	(show_script_ext_mode, find_and_open_script): New functions.
	(source_script): Enhance to handle Python scripts.
	(init_cli_cmds): Add set/show script-extension commands.

2010-01-16  Stan Shebs  <stan@codesourcery.com>

	* tracepoint.h (struct trace_status): Use unsigned long long
	instead of size_t.
	* tracepoint.c (trace_status_command): Fix printf directive.
	(trace_save_command): Check fwrite returns, fix printf directive.
	(trace_filename): New global.
	(tfile_open): Set it, check read returns.
	(tfile_close): Free trace_filename.
	(tfile_get_traceframe_address): Check read returns.
	(tfile_trace_find): Ditto.
	(tfile_fetch_registers): Ditto.
	(tfile_xfer_partial): Ditto.
	(tfile_get_trace_state_variable_value): Ditto.

2010-01-15  Stan Shebs  <stan@codesourcery.com>

	Add trace file support.
	* tracepoint.h (enum trace_stop_reason): New enum.
	(struct trace_status): New struct.
	(parse_trace_status): Declare.
	(struct uploaded_tp): Move here from remote.c,
	add fields for actions.
	(struct uploaded_tsv): New struct.
	* tracepoint.c (tfile_ops): New target vector.
	(trace_fd): New global.
	(tfile_open): New function.
	(tfile_close): New function.
	(tfile_files_info): New function.
	(tfile_get_trace_status): New function.
	(tfile_get_traceframe_address): New function.
	(tfile_trace_find): New function.
	(tfile_fetch_registers): New function.
	(tfile_xfer_partial): New function.
	(tfile_get_trace_state_variable_value): New function.
	(init_tfile_ops): New function.
	(_initialize_tracepoint): Call it, add tfile target.
	(trace_status): New global.
	(current_trace_status): New function.
	(trace_running_p): Remove, change all users to get from
	current_trace_status()->running.
	(get_trace_status): Remove.
	(trace_status_command): Call target_get_trace_status directly,
	report more detail including tracing stop reasons.
	(trace_find_command): Always allow tfind on a file.
	(trace_find_pc_command): Ditto.
	(trace_find_tracepoint_command): Ditto.
	(trace_find_line_command): Ditto.
	(trace_find_range_command): Ditto.
	(trace_find_outside_command): Ditto.
	(trace_frames_offset, cur_offset): Declare as off_t.
	(trace_regblock_size): Rename from reg_size, update users.
	(parse_trace_status): New function.
	(tfile_interp_line): New function.
	(disconnect_or_stop_tracing): Ensure current trace
	status before asking what to do.
	(stop_reason_names): New global.
	(trace_save_command): New command.
	(get_uploaded_tp): Move here from remote.c.
	(find_matching_tracepoint): Ditto.
	(merge_uploaded_tracepoints): New function.
	(parse_trace_status): Use stop_reason_names.
	(_initialize_tracepoint): Define tsave command.
	* target.h (target_ops): New fields to_save_trace_data,
	to_upload_tracepoints, to_upload_trace_state_variables,
	to_get_raw_trace_data, change to_get_trace_status
	to take a pointer to a status struct.
	(target_save_trace_data): New macro.
	(target_upload_tracepoints): New macro.
	(target_upload_trace_state_variables): New macro.
	(target_get_raw_trace_data): New macro.
	* target.c (update_current_target): Add new methods, change
	signature of to_get_trace_status.
	* remote.c (hex2bin): Make globally visible.
	(bin2hex): Ditto.
	(remote_download_trace_state_variable): Download name also.
	(remote_get_trace_status): Update parameter, use
	parse_trace_status.
	(remote_save_trace_data): New function.
	(remote_upload_tracepoints): New function.
	(remote_upload_trace_state_variables): New function.
	(remote_get_raw_trace_data): New function.
	(remote_start_remote): Use them.
	(_initialize_remote_ops): Add operations.
	* ax-gdb.c: Include breakpoint.h.
	* breakpoint.c (create_tracepoint_from_upload): Use
	break_command_really, return tracepoint, warn about unimplemented
	parts.
	* NEWS: Mention trace file addition.

2010-01-15  Jan Kratochvil  <jan.kratochvil@redhat.com>

	Fix compilation warning on gcc-3.4.
	* exec.c (print_section_info): Move the `displacement' variable
	initialization to its declaration.

2010-01-15  Jan Kratochvil  <jan.kratochvil@redhat.com>

	* gdb-gdb.py (StructMainTypePrettyPrinter): Fix TYPE_CODE_RANGE
	comparison.

2010-01-15  Eric Botcazou  <botcazou@adacore.com>

	"info tasks" broken by typedefs in ATCB type definitions.
	* ada-lang.c (ada_template_to_fixed_record_type_1): Add call to
	ada_check_typedef before retrieving the length of the type for
	regular fields.

2010-01-15  Joel Brobecker  <brobecker@adacore.com>

	Do not use name-based lookup for unconstrained packed arrays.
	* ada-lang.c (find_parallel_type_by_descriptive_type):
	Limit the fallback to name-based lookups to the case where
	the type is a constrained packed array.

2010-01-15  Joel Brobecker  <brobecker@adacore.com>

	Enhance gdb-gdb.py to handle main_type.type_specific.
	* gdb-gdb.py: Print the type-specific part of struct main_type.

2010-01-15  Jan Kratochvil  <jan.kratochvil@redhat.com>

	* configure.ac (AC_CHECK_FUNCS): Check for setrlimit and getrlimit.
	* configure: Regenerate.
	* config.in: Regenerate.
	* utils.c: Include sys/resource.h.
	(dump_core, can_dump_core): New.
	(internal_vproblem): Update the comment.  Check can_dump_core while
	setting dump_core_p.  Replace two abort calls by dump_core calls.

2010-01-14  Jan Kratochvil  <jan.kratochvil@redhat.com>
	    Eli Zaretskii  <eliz@gnu.org>

	* NEWS: Document the PIE support.

2010-01-14  Jan Kratochvil  <jan.kratochvil@redhat.com>

	* linux-tdep.c: Remove includes gdbcore.h, observer.h and elf-bfd.h.
	(check_is_pie_binary, _initialize_linux_tdep): Remove.

2010-01-14  Jan Kratochvil  <jan.kratochvil@redhat.com>

	* solib-svr4.c (svr4_exec_displacement): New comment for entry_point.
	Replace exec_entry_point call by bfd_get_start_address.

2010-01-14  Jan Kratochvil  <jan.kratochvil@redhat.com>

	Support Valgrind attachments broken by the PIE support.
	* auxv.c: Include gdbcore.h.
	(procfs_xfer_auxv): Make static.  Reduce its comment.  Drop its
	parameters ops, object and annex.  Remove their assertions.
	(ld_so_xfer_auxv, memory_xfer_auxv): New function.
	* auxv.h (procfs_xfer_auxv): Remove comment.  Rename to ...
	(memory_xfer_auxv): ... here.
	* linux-nat.c (linux_xfer_partial): Rename procfs_xfer_auxv to
	memory_xfer_auxv.
	* procfs.c (procfs_xfer_partial): Likewise.
	* solib-svr4.c (svr4_relocate_main_executable): New prototype.
	(svr4_special_symbol_handling): Call svr4_relocate_main_executable.
	(svr4_solib_create_inferior_hook): Conditionalize the
	svr4_relocate_main_executable call.

2010-01-14  Jan Kratochvil  <jan.kratochvil@redhat.com>

	* solib-svr4.c (scan_dyntag): Remove variable dyn_addr.  New variable
	target_section.  Find SECT in current_target_sections, gdb_assert it.
	(elf_lookup_lib_symbol): Pass the binary file if given symfile_objfile.
	New variable abfd.
	* symtab.c (lookup_objfile_from_block): Return the binary file instead
	of separate debug info file.

2010-01-14  Jan Kratochvil  <jan.kratochvil@redhat.com>

	Support PIEs with no symfile_objfile.
	* exec.c (print_section_info <abfd == exec_bfd>): Relocate Entry point.
	* solib-svr4.c (svr4_relocate_main_executable <exec_bfd>): New block.

2010-01-14  Jan Kratochvil  <jan.kratochvil@redhat.com>

	* solib-svr4.c (svr4_relocate_main_executable): Move the static exec
	code part to ...
	(svr4_static_exec_displacement): ... a new function.
	(svr4_exec_displacement): New function.
	(svr4_relocate_main_executable): Call svr4_exec_displacement.  Allocate
	new_offsets using alloca now.  Remove variable old_chain and changed.
	Call objfile_relocate unconditionally now.

2010-01-14  Doug Evans  <dje@google.com>

	* gdbtypes.c (arch_flags_type): Fix comment.
	* gdbtypes.h (arch_composite_type): Fix comment.

2009-01-14  Tristan Gingold  <gingold@adacore.com>

	* machoread.c (macho_add_oso_symfile): Add symfile_flags parameter.
	Call xstrdup for abfd->filename.  Pass symfile_flags and objfile flags
	to symbol_file_add_from_bfd.  Add OSO as separate objfile.
	(macho_oso_symfile): Add symfile_flags parameter.  Pass it to
	macho_add_oso_symfile.
	(macho_symfile_read): Pass symfile_flags to macho_oso_symfile.

2010-01-14  Joel Brobecker  <brobecker@adacore.com>

	Tru64: Dead threads are never deleted.
	* dec-thread.c (dec_thread_ptid_is_alive): New function.
	(dec_thread_count_gdb_threads): Fix counter increment.
	(dec_thread_add_gdb_thread): Fix *listp increment.
	(resync_thread_list): Fix bug in deletion of dead threads that
	caused all threads to be deleted, instead of just the dead ones.

2010-01-13  Phil Muldoon  <pmuldoon@redhat.com>

	PR python/10705

	* python/python-internal.h: Add lazy_string_object_type
	definition.
	(create_lazy_string_object, gdbpy_initialize_lazy_string)
	(gdbpy_is_lazystring, gdbpy_extract_lazy_string): Define.
	* python/py-value.c (valpy_lazy_string): New function.
	(convert_value_from_python): Add lazy string conversion.
	* python/py-prettyprint.c (pretty_print_one_value): Check if
	return is also a lazy string.
	(print_string_repr): Add lazy string printing branch.
	(print_children): Likewise.
	* python/py-lazy-string.c: New file. Implement lazy strings.
	* python/python.c (_initialize_python): Call
	gdbpy_initialize_lazy_string.
	* varobj.c (value_get_print_value): Add lazy string printing
	branch.  Account for encoding.
	* c-lang.c (c_printstr): Account for new encoding argument.  If
	encoding is NULL, find encoding suited for type, otherwise use
	user encoding.
	* language.h (language_defn): Add encoding argument.
	(LA_PRINT_STRING): Likewise.
	* language.c (unk_lang_printstr): Update to reflect new encoding
	argument to language_defn.
	* ada-lang.h (ada_printstr): Likewise.
	* c-lang.h (c_printstr): Likewise.
	* p-lang.h (pascal_printstr);
	* f-lang.c (f_printstr): Likewise.
	* m2-lang.c (m2_printstr): Likewise.
	* objc-lang.c (objc_printstr): Likewise.
	* p-lang.c (pascal_printstr): Likewise.
	* scm-lang.c (scm_printstr): Likewise.
	* c-valprint.c (c_val_print): Update LA_PRINT_STRING call for
	encoding argument.
	* ada-valprint.c (ada_printstr): Likewise.
	* f-valprint.c (f_val_print): Likewise
	* m2-valprint.c (m2_val_print): Likewise.
	* p-valprint.c (pascal_val_print): Likewise.
	* expprint.c (print_subexp_standard): Likewise.
	* valprint.c (val_print_string): Likewise.
	* Makefile.in (SUBDIR_PYTHON_OBS): Add py-lazy-string.
	(SUBDIR_PYTHON_SRCS): Likewise.
	(py-lazy-string.o): New rule.

2010-01-13  Doug Evans  <dje@google.com>

	* mi/mi-main.c (list_available_thread_groups): Avoid "may be used
	uninitialized" warning from gcc on local `tree'.

2010-01-13  Vladimir Prus  <vladimir@codesourcery.com>

	Implement core awareness.

	* bcache.c (compare_ints): Remove
	(print_percentage): Use compare_positive_ints.
	* defs.h (compare_positive_ints): Declare.
	* linux-nat.h (struct lin_lwp): New field core.
	(linux_nat_core_of_thread_1): Declare.
	* linux-nat.c (add_lwp): Init the 'core' field.
	(linux_nat_wait_1): Record the core.
	(linux_nat_core_of_thread_1, linux_nat_core_of_thread): New.
	(linux_nat_add_target): Register the above.
	* linux-thread-db.c (update_thread_core): New.
	(thread_db_find_new_threads): Update core information for
	every thread.
	* remote.c (struct private_thread_info): New.
	(free_private_thread_info, demand_private_info): New.
	(PACKET_qXfer_threads, use_osdata_threads): New.
	(struct thread_item, threads_parsing_context
	(start_thread, end_thread, thread_attributes)
	(thread_children, threads_children, threads_elements): New.
	(remote_threads_info): Try qXfer:threads before anything
	else.
	(remote_protocol_packets): Register qXfer:threads.
	(remote_open_1): Init use_osdata_threads.
	(struct stop_reply): New field 'core'.
	(remote_parse_stop_reply): Parse core number.
	(process_stop_reply): Record core number.
	(remote_xfer_partial): Handle qXfer:threads.
	(remote_core_of_thread): New.
	(init_remote_ops): Register remote_core_of_thread.
	(_initialize_remote): Register qXfer:read.
	* target.c (target_core_of_thread): New
	* target.h (enum target_object): New value TARGET_OBJECT_THREADS.
	(struct target_ops): New field to_core_of_threads.
	(target_core_of_thread): Declare.
	* gdbthread.h (struct thread_info): New field private_dtor.
	* thread.c (print_thread_info): Report the core.
	* ui-out.c (MAX_UI_OUT_LEVELS): Increase.
	* utils.c (compare_positive_ints): New.
	* features/threads.dtd: New.
	* mi/mi-interp.c (mi_on_normal_stop): Report the core.
	* mi/mi-main.c (struct collect_cores_data, collect_cores)
	(do_nothing, free_vector_of_osdata_items)
	(splay_tree_int_comparator, free_splay_tree): New.
	(print_one_inferior_data): Implemented printing of selected
	inferiors.  Collect and print cores.
	(output_cores): New.
	(mi_cmd_list_thread_groups): Support --recurse.  Permit specifying
	thread groups together with --available.

2010-01-12  Jan Kratochvil  <jan.kratochvil@redhat.com>

	* configure: Regenerate (for _STRUCTURED_PROC).

2010-01-12  Joel Brobecker  <brobecker@adacore.com>

	Delete dead function.
	* ada-lang.c (extract_string): Delete.  No longer used.

2010-01-12  Joel Brobecker  <brobecker@adacore.com>

	Fix -Wunused warning in dec-thread.c.
	* dec-thread.c (dec_thread_count_gdb_threads)
	(dec_thread_add_gdb_thread): Prevent -Wunused warning.

2010-01-12  Joel Brobecker  <brobecker@adacore.com>

	* ada-valprint.c (ada_print_floating): Remove trailing space.

2010-01-12  Joel Brobecker  <brobecker@adacore.com>

	Add support for DW_AT_GNAT_descriptive_type.
	* gdbtypes.h (enum type_specific_kind): New enum.
	(struct main_type) [type_specific_field]: New component.
	[type_specific]: Add new component "gnat_stuff".
	(struct gnat_aux_type): New type.
	(INIT_CPLUS_SPECIFIC): Also set TYPE_SPECIFIC_FIELD (type).
	(HAVE_CPLUS_STRUCT): Also check TYPE_SPECIFIC_FIELD (type).
	(gnat_aux_default, allocate_gnat_aux_type): Add declaration.
	(INIT_GNAT_SPECIFIC, ALLOCATE_GNAT_AUX_TYPE, HAVE_GNAT_AUX_INFO)
	(TYPE_SPECIFIC_FIELD): New macros.
	(TYPE_CPLUS_SPECIFIC): Return cplus_struct_default if the given
	type does not hold any cplus-specific data.
	(TYPE_RAW_CPLUS_SPECIFIC): New macro.
	(TYPE_GNAT_SPECIFIC, TYPE_DESCRIPTIVE_TYPE): New macros.
	(TYPE_IS_OPAQUE): Use HAVE_CPLUS_STRUCT to check if type has
	cplus-specific data.
	* gdbtypes.c (allocate_cplus_struct_type): Minor stylistic rewrite.
	Set new component TYPE_SPECIFIC_FIELD (type).
	(gnat_aux_default): New constant.
	(allocate_gnat_aux_type): New function.
	(init_type): Add initialization the type-specific stuff for
	TYPE_CODE_FLT and TYPE_CODE_FUNC types.
	(print_gnat_stuff): New function.
	(recursive_dump_type): Use HAVE_CPLUS_STRUCT to check for cplus-
	specific data.  Adjust code that prints the contents of the
	type-specific union using the TYPE_SPECIFIC_FIELD value.
	* dwarf2read.c (dwarf2_attach_fields_to_type): Do not allocate
	the type cplus stuff for Ada types.
	(dwarf2_add_member_fn, dwarf2_attach_fn_fields_to_type):
	Error out if these routines are called with an Ada type.
	(read_structure_type, read_array_type, read_subrange_type):
	Add call to set_descriptive_type.
	(set_die_type): Initialize the gnat-specific data if necessary.
	(need_gnat_info, die_descriptive_type, set_descriptive_type):
	New functions.
	* ada-lang.c (decode_constrained_packed_array_type): Use
	decode_constrained_packed_array_type instead of doing a standard
	lookup to locate a parallel type.
	(find_parallel_type_by_descriptive_type): New function.
	(ada_find_parallel_type_with_name): New function.
	(ada_find_parallel_type): Reimplement using
	ada_find_parallel_type_with_name.
	* ada-valprint.c (print_field_values): Use HAVE_CPLUS_STRUCT
	to check if type has a cplus stuff.
	* linespec.c (total_number_of_methods): Likewise.
	* mdebugread.c (new_type): Likewise.

2010-01-11  Jan Kratochvil  <jan.kratochvil@redhat.com>

	* NEWS: Document the 0b binary number prefix parsing.

2010-01-11  Jan Kratochvil  <jan.kratochvil@redhat.com>

	* objfiles.c (objfile_relocate1): Change the return type to int.
	Describe the new return value.  Return non-zero if data changed.
	(objfile_relocate): New variable changed.  Set it.  Call
	breakpoint_re_set depending on CHANGED.

2010-01-11  Jan Kratochvil  <jan.kratochvil@redhat.com>

	Implement binary numbers parsing.
	* c-exp.y (parse_number): New case 'b' and 'B'.

2010-01-11  Jan Kratochvil  <jan.kratochvil@redhat.com>
	    Tristan Gingold  <gingold@adacore.com>

	* solib.c (info_sharedlibrary_command): Replace
	objfile_has_partial_symbols and objfile_has_full_symbols calls by
	objfile_has_symbols.

2010-01-10  Joel Brobecker  <brobecker@adacore.com>

	* NEWS: Document the improvements made to the mips-irix port.

2010-01-09  Joel Brobecker  <brobecker@adacore.com>

	Fix the documentation of valprint.c:value_print.
	* valprint.c (value_print): Update the function description to
	mention that the syntax of the output follows the current_language,
	not necessarily C.

2010-01-09  Jan Kratochvil  <jan.kratochvil@redhat.com>

	Fix displacement of separate debug info files.
	* objfiles.c (objfile_relocate): Rename to ...
	(objfile_relocate1): ... here and make it static.  Extend the comment.
	(objfile_relocate): New function.
	* solib-spu.c (spu_relocate_main_executable): Explicitly check if
	SYMFILE_OBJFILE is NULL.  Remove variables objfile and old_chain.
	Remove following of SEPARATE_DEBUG_OBJFILE.  new_offsets is now
	allocated using alloca.
	* symfile.c (copy_section_addr_info): Remove.
	(build_section_addr_info_from_objfile): Make it global.  New variables
	addr_bit and mask, use them.
	* symfile.h (build_section_addr_info_from_objfile): New prototype.
	(copy_section_addr_info): Remove.

2010-01-09  Joel Brobecker  <brobecker@adacore.com>

	Signal unwinder for mips-irix N32.
	* mips-irix-tdep.c: #include mips-tdep.h, trad-frame.h, and
	tramp-frame.h.
	(SIGTRAMP_FRAME_SIZE, SIGCONTEXT_PC_OFF, SIGCONTEXT_REGS_OFF)
	(SIGCONTEXT_FPREGS_OFF, SIGCONTEXT_FPCSR_OFF, SIGCONTEXT_HI_OFF)
	(SIGCONTEXT_LO_OFF): New macros. 
	(mips_irix_n32_tramp_frame_init): New function. 
	(mips_irix_n32_tramp_frame): New static constant.
	(mips_irix_init_abi): Prepend the mips_irix_n32_tramp_frame unwinder.

2010-01-09  Joel Brobecker  <brobecker@adacore.com>

	Breakpoint in shared library does not work on mips-irix.
	* procfs.c: #include "observer.h".
	(procfs_inferior_created): New function, moving here the code
	which unsets the syssgi syscall-exit notifications.
	(procfs_create_inferior): Remove the code which unsets the syssgi
	syscall-exit notifications. It is too early to do this here.
	(_initialize_procfs): Attach the procfs_inferior_created observer.

2010-01-09  Joel Brobecker  <brobecker@adacore.com>

	Wrong return convention for arrays (mips-irix).
	* mips-tdep.c (mips_n32n64_return_value): Arrays whose size is
	128 bits or smaller are returned the same way as structs
	and unions of the the same size.

2010-01-09  Joel Brobecker  <brobecker@adacore.com>

	Cannot set the PC on mips-irix.
	* irix5-nat.c (fill_gregset): Check regno against the raw PC
	register number, no the cooked one.

2010-01-09  Joel Brobecker  <brobecker@adacore.com>

	Error while loading core file on mips-irix.
	* solib-irix.c (irix_solib_create_inferior_hook): Do nothing
	if debugging from a core file.

2010-01-09  Joel Brobecker  <brobecker@adacore.com>

	GDB hangs when attaching to process on mips-irix.
	* solib-irix.c (irix_solib_create_inferior_hook): Do nothing if
	attaching to a process.

2010-01-09  Joel Brobecker  <brobecker@adacore.com>

	Use the correct breakpoint instruction on mips-irix.
	* mips-tdep.c (mips_breakpoint_from_pc): Add new static variable
	containing the correct breakpoint instruction to use on mips-irix.
	Use it when the osabi is GDB_OSABI_IRIX.

2010-01-09  Joel Brobecker  <brobecker@adacore.com>

	-Wunused warning in procfs.c (mips-irix only).
	* procfs.c (gdb_praddset, gdb_prdelset): New macros.  Use them
	throughout instead of using praddset and prdelset respectively.

2010-01-09  Joel Brobecker  <brobecker@adacore.com>

	GDB crash while stepping into function.
	* infrun.c (handle_inferior_event): Refetch the current frame
	after handling what.main_action, in case that pointer became
	dangling.

2010-01-09  Joel Brobecker  <brobecker@adacore.com>

	Fix build failure of solaris-hosted cross debuggers.
	* ada-valprint.c, parse.c: Include defs.h before including ctype.h.

2010-01-09  Daniel Gutson  <dgutson@codesourcery.com>

	Fix build failure on sparc-solaris.
	* procfs.c: (procfs_do_thread_registers) Use elfcore_write_lwpstatus.

2010-01-08  Jan Kratochvil  <jan.kratochvil@redhat.com>

	Move some symfile code into subroutines.
	* symfile.h (relative_addr_info_to_section_offsets)
	(addr_info_make_relative): New prototypes.
	* symfile.c (default_symfile_offsets): Move a part to ...
	(relative_addr_info_to_section_offsets): ... this new function.
	(default_symfile_offsets): Call it.
	(syms_from_objfile <!mainline && addrs && addrs->other[0].name>): Move
	this part to ...
	(addr_info_make_relative): ... this new function.

2010-01-08  Jan Kratochvil  <jan.kratochvil@redhat.com>

	Add from_tty to solib_create_inferior_hook.
	* infcmd.c (post_create_inferior): Move solib_add after
	solib_create_inferior_hook.  Pass from_tty to
	solib_create_inferior_hook.  Call solib_add and SOLIB_ADD with
	0 from_tty and comment why.
	* infrun.c (follow_exec): Pass from_tty solib_create_inferior_hook as 0.
	* linux-nat.c (linux_child_follow_fork): Likewise.
	* nto-procfs.c (procfs_post_attach, procfs_create_inferior): Likewise.
	* solib-darwin.c (darwin_solib_create_inferior_hook): New parameter
	from_tty.
	* solib-frv.c (frv_solib_create_inferior_hook): Likewise.
	* solib-irix.c (irix_solib_create_inferior_hook): Likewise.
	* solib-null.c (null_solib_create_inferior_hook): Likewise.
	* solib-osf.c (osf_solib_create_inferior_hook): Likewise.
	* solib-pa64.c (pa64_solib_create_inferior_hook): Likewise.
	* solib-som.c (som_solib_create_inferior_hook): Likewise.
	* solib-spu.c (spu_solib_create_inferior_hook): New parameter from_tty.
	Pass it to svr4_so_ops.solib_create_inferior_hook.
	* solib-sunos.c (sunos_solib_create_inferior_hook): New parameter
	from_tty.
	* solib-svr4.c (enable_break): New parameter from_tty.  Pass it to
	solib_add.
	(svr4_solib_create_inferior_hook): New parameter from_tty.  Pass it to
	enable_break.
	* solib-target.c (solib_target_solib_create_inferior_hook): New
	parameter from_tty.
	* solib.c (solib_create_inferior_hook): New parameter from_tty.  Pass
	it to ops->solib_create_inferior_hook.
	(reload_shared_libraries): Pass from_tty to solib_create_inferior_hook.
	Move solib_add after solib_create_inferior_hook, call it now with
	from_tty as 0.  New comment there.
	* solib.h (solib_create_inferior_hook): New parameter from_tty.
	* solist.h (struct target_so_ops <solib_create_inferior_hook>):
	Likewise.

2010-01-08  Vladimir Prus  <vladimir@codesourcery.com>

	Fix multiexec race.
	* infrun.c (handle_inferior_event): Use get_thread_regcache
	with events ptid, not get_current_regcache.

2009-01-08  Joel Brobecker  <brobecker@adacore.com>

	GDB crash with empty executable name (MinGW).
	* source.c (openp): Add assert that parameter string is not NULL.
	if parameter string is an empty string, then return with a failure
	immediately.

2009-01-08  Joel Brobecker  <brobecker@adacore.com>

	Get rid of support for VAX Floats.
	* ada-lang.h (ada_is_vax_floating_type, ada_vax_float_type_suffix)
	(ada_vax_float_print_function): Delete.
	* ada-lang.c (ada_is_vax_floating_type, ada_vax_float_type_suffix)
	(ada_vax_float_print_function): Delete.
	* ada-typeprint.c (print_vax_floating_point_type): Delete.
	(ada_print_type): Remove support for VAX floats.
	* ada-valprint.c (ada_val_print_1): Remove support for VAX floats.

2010-01-08  Jan Kratochvil  <jan.kratochvil@redhat.com>

	* stabsread.c (read_args): Handle zero arguments.

2009-01-08  Joel Brobecker  <brobecker@adacore.com>

	Cannot find in-tree libiconv.a after reconfigure.
	* acinclude.m4 (AM_ICONV): If we find an in-tree libiconv.a
	that we can use, then cache the path to this archive.
	* configure: Regenerate.

2010-01-07  Stan Shebs  <stan@codesourcery.com>

	Make tracepoint operations go through target vector.
	* target.h (enum trace_find_type): New enum.
	(struct target_ops): New fields to_trace_init,
	to_download_tracepoint, to_download_trace_state_variable,
	to_trace_set_readonly_regions, to_trace_start, to_get_trace_status,
	to_trace_stop, to_trace_find, to_get_trace_state_variable_value,
	to_set_disconnected_tracing.
	(target_trace_init): New macro.
	(target_download_tracepoint): New macro.
	(target_download_trace_state_variable): New macro.
	(target_trace_start): New macro.
	(target_trace_set_readonly_regions): New macro.
	(target_get_trace_status): New macro.
	(target_trace_stop): New macro.
	(target_trace_find): New macro.
	(target_get_trace_state_variable_value): New macro.
	(target_set_disconnected_tracing): New macro.
	* target.c (update_current_target): Inherit and set defaults for
	tracepoint operations.
	* tracepoint.c (default_collect): Make globally visible.
	(target_is_remote): Remove, along with all calls.
	(tvariables_info): Call target_get_trace_state_variable_value.
	(remote_set_transparent_ranges): Remove.
	(trace_start_command): Call target_trace_init,
	target_download_tracepoint, etc.
	(download_tracepoint): Remove.
	(trace_stop_command): Simplify.
	(stop_tracing): Call target_trace_stop.
	(get_trace_status): Call target_get_trace_status.
	(trace_status_command): Add case for targets that cannot trace.
	(finish_tfind_command): Change to take numerical arguments, call
	target_trace_find.
	(trace_find_command): Update call to finish_tfind_command.
	(trace_find_pc_command): Ditto.
	(trace_find_tracepoint_command): Ditto.
	(trace_find_line_command): Ditto.
	(trace_find_range_command): Ditto.
	(trace_find_outside_command): Ditto.
	(set_disconnected_tracing_value): Call
	target_set_disconnected_tracing.
	* remote.c: Add protocol encoding bits from tracepoint.c.
	(trace_error): Move from tracepoint.c.
	(remote_get_noisy_reply): Ditto.
	(free_actions_list_cleanup_wrapper): Ditto.
	(free_actions_list): Ditto.
	(remote_trace_init): New function.
	(remote_download_tracepoint): New function.
	(remote_download_trace_state_variable): New function.
	(remote_trace_set_readonly_regions): New function.
	(remote_trace_start): New function.
	(remote_get_trace_status): New function.
	(remote_trace_stop): New function.
	(remote_trace_find): New function.
	(remote_download_trace_state_variable): New function.
	(remote_set_disconnected_tracing): New function.
	(init_remote_ops): Add tracepoint operations.

	* tracepoint.c (trace_dump_command): Don't decr_pc_after_break.

2010-01-07  Tristan Gingold  <gingold@adacore.com>

	* symfile.c (build_section_addr_info_from_objfile): New function.
	(symbol_file_add_separate): Don't use offsets from objfile but
	built an addr info.

2010-01-06  Stan Shebs  <stan@codesourcery.com>

	Support disconnected tracing.
	* infcmd.c (detach_command): Ask whether to stop tracing.
	* cli/cli-cmds.c (quit_command): Ditto.
	* breakpoint.h (struct breakpoint): New field number_on_target.
	* breakpoint.c (create_tracepoint_from_upload): New function.
	(get_tracepoint_by_number_on_target): New function.
	* remote.c (struct remote): New field disconnected_tracing.
	(remote_disconnected_tracing_feature): New function.
	(remote_protocol_features): Add DisconnectedTracing.
	(struct uploaded_tp): New struct.
	(uploaded_tps): New global.
	(get_uploaded_tp): New function.
	(find_matching_tracepoint): New function.
	(remote_get_tracing_state): New function.
	(remote_start_remote): Call it.
	* tracepoint.c (disconnected_tracing): New global.
	(trace_start_command): Initialize number_on_target.
	(stop_tracing): New function, split out from...
	(trace_stop_command): Call stop_tracing.
	(get_trace_status): New function, split out from...
	(trace_status_command): Call get_trace_status, add info on
	disconnection behavior.
	(disconnect_or_stop_tracing): New function.
	(finish_tfind_command): Translate from number on target.
	(trace_find_tracepoint_command): Translate to number on target.
	(send_disconnected_tracing_value): New function.
	(set_disconnected_tracing): New function.
	(_initialize_tracepoint): Add disconnected-tracing variable.
	* NEWS: Mention disconnected tracing.

2010-01-06  Tristan Gingold  <gingold@adacore.com>

	* symtab.c (lookup_global_symbol_from_objfile): Rename objfile
	parameter to main_objfile.  Iterate on all separate debug objfiles.
	* symfile.h (symbol_file_add_separate)
	(find_separate_debug_file_by_debuglink): Remove parameter names.
	* symfile.c (symbol_file_add_separate): Use add_separate_objfile.
	(reread_symbols): Use free_objfile_separate_debug.
	* objfiles.h (struct objfile): Add separate_debug_objfile_link.
	Adjust comment.
	(objfile_separate_debug_iterate, add_separate_debug_objfile)
	(free_objfile_separate_debug): New prototypes.
	* objfiles.c (objfile_separate_debug_iterate): New function.
	(add_separate_debug_objfile, free_objfile_separate_debug): New
	functions.
	(free_objfile): Use free_objfile_separate_debug.  Adjust for
	multiple separate debug objfile.
	(objfile_has_symbols): Adjust comment.  Iterate on all separate
	debug objfiles.
	* minsyms.c (lookup_minimal_symbol): Adjust for multiple separate
	debug objfile.
	(lookup_minimal_symbol_text): Ditto.
	(lookup_minimal_symbol_by_pc_name): Ditto.
	(lookup_minimal_symbol_solib_trampoline): Ditto.
	(lookup_minimal_symbol_by_pc_section_1): Iterate on all separate
	debug objfiles.

2010-01-05  Stan Shebs  <stan@codesourcery.com>

	Add fast tracepoints.
	* arch-utils.h (default_fast_tracepoint_valid_at): Declare.
	* arch-utils.c (default_fast_tracepoint_valid_at): New function.
	* breakpoint.h (enum bptype): Add bp_fast_tracepoint.
	* breakpoint.c (tracepoint_type): New function.
	(ALL_TRACEPOINTS): Use it.
	(should_be_inserted): Ditto.
	(bpstat_check_location): Ditto.
	(print_one_breakpoint_location): Ditto.
	(user_settable_breakpoint): Ditto.
	(set_breakpoint_location_function): Ditto.
	(disable_breakpoints_in_shlibs): Ditto.
	(delete_trace_command): Ditto.
	(print_it_typical): Add bp_fast_tracepoint case.
	(bpstat_what): Ditto.
	(print_one_breakpoint_location): Ditto.
	(allocate_bp_location): Ditto.
	(mention): Ditto.
	(breakpoint_re_set_one): Ditto.
	(disable_command): Ditto.
	(enable_command): Ditto.
	(check_fast_tracepoint_sals): New function.
	(break_command_really): Call it.
	(ftrace_command): New function.
	(_initialize_breakpoint): Add ftrace command.
	* gdbarch.sh (fast_tracepoint_valid_at): New.
	* gdbarch.h, gdbarch.c: Regenerate.
	* i386-tdep.c (i386_fast_tracepoint_valid_at): New function.
	(i386_gdbarch_init): Use it.
	* remote.c (struct remote_state): New field fast_tracepoints.
	(PACKET_FastTracepoints): New packet config type.
	(remote_fast_tracepoint_feature): New function.
	(remote_protocol_features): Add FastTracepoints.
	(remote_supports_fast_tracepoints): New function.
	(_initialize_remote): Add FastTracepoints.
	* tracepoint.c (download_tracepoint): Add fast tracepoint option.
	* NEWS: Mention fast tracepoints.

2010-01-06  Joel Brobecker  <brobecker@adacore.com>

	* gdb-gdb.py: New file.

2010-01-05  Michael Snyder  <msnyder@vmware.com>

	* infrun.c (handle_inferior_event): Fix typo in comment.

2010-01-05  Jan Kratochvil  <jan.kratochvil@redhat.com>

	* symfile.c (syms_from_objfile): Remove the !MAINLINE conditional.

2010-01-04  Ulrich Weigand  <uweigand@de.ibm.com>

        * features/Makefile (WHICH): Add s390-linux32, s390-linux64,
	and s390x-linux64.
	(s390-linux32-expedite): Define.
	(s390-linux64-expedite): Define.
	(s390x-linux64-expedite): Define.
	* features/s390-acr.xml: New file.
	* features/s390-fpr.xml: New file.
	* features/s390-core32.xml: New file.
	* features/s390-core64.xml: New file.
	* features/s390x-core64.xml: New file.
	* features/s390-linux32.xml: New file.
	* features/s390-linux64.xml: New file.
	* features/s390x-linux64.xml: New file.
	* features/s390-linux32.c: New generated file.
	* features/s390-linux64.c: New generated file.
	* features/s390x-linux64.c: New generated file.

	* regformats/s390-linux32.dat: New generated file.
	* regformats/s390-linux64.dat: New generated file.
	* regformats/s390x-linux64.dat: New generated file.
	* regformats/reg-s390.dat: Remove.
	* regformats/reg-s390x.dat: Remove.

	* s390-nat.c: Include "auxv.h" and <elf.h>.
	(HWCAP_S390_HIGH_GPRS): Define if undefined.
	(s390_target_wordsize): New function.
	(s390_auxv_parse): Likewise.
	(s390_get_hwcap): Likewise.
	(s390_read_description): Likewise.
	(_initialize_s390_nat): Install s390_auxv_parse and
	s390_read_description.

	* s390-tdep.c: Include "features/s390-linux32.c",
	"features/s390-linux64.c", and "features/s390x-linux64.c".
	(struct gdbarch_tdep): Add gpr_full_regnum, pc_regnum, and cc_regnum.
	(s390_register_call_saved): New function.
	(s390_register_name): Remove.
	(s390_register_type): Remove.
	(s390_dwarf_regmap): Add lower half GPR pseudo DWARF CFI regnums.
	(s390_dwarf_reg_to_regnum): Remap GPR regnums to full GPRs.
	(s390_adjust_frame_regnum): Remap GPR regnums to lower halves for CFI.
	(s390_pseudo_register_name): New function.
	(s390_pseudo_register_type): New function.
	(s390_pseudo_register_read): Handle both 32-bit and 64-bit cases.
	Handle full GPR pesudos and varying pseudo register numbers.
	(s390_pseudo_register_write): Likewise
	(s390x_pseudo_register_read): Remove.
	(s390x_pseudo_register_write): Likewise.
	(s390_register_group): Remove.
	(s390_pseudo_register_group): New function.
	(s390_regmap_gregset): Add GPR upper halves.
	(s390x_regmap_gregset): Likewise.
	(s390_regmap_fpregset): Likewise.
	(s390_regmap_upper): New global variable.
	(s390_upper_regset): New global variable.
	(s390_upper_regset_sections): New global variable.
	(s390_regset_from_core_section): Handle GPR upper halves.
	(s390_core_read_description): New function.
	(s390_prologue_frame_unwind_cache): Set up ABI call-saved/clobbered
	register information.  Handle varying pseudo register numbers.
	(s390_backchain_frame_unwind_cache): Likewise.
	(s390_frame_prev_register): Unwind full GPRs to show lower halves.
	(s390_stub_frame_unwind_cache): Handle varying pseudo register numbers.
	(s390_sigtramp_frame_unwind_cache): Unwind PSWM and PSWA as well as
	PC and CC pseudos.  Unwind upper halves and full GPRs as appropriate.
	Handle varying pseudo register numbers.
	(s390_unwind_pc): Handle varying pseudo register numbers.
	(s390_dwarf2_prev_register): New function.
	(s390_dwarf2_frame_init_reg): Set up ABI call-saved/clobbered
	register information.  Handle varying pseudo register numbers.
	Install s390_dwarf2_prev_register to unwind full GPRs.
	(s390_gdbarch_init): Handle target descriptions.  Assign varying
	pseudo register numbers.  Install s390_adjust_frame_regnum.
	(_initialize_s390_tdep): Initialize target descriptions.

	* s390-tdep.h (S390_R0_UPPER_REGNUM .. S390_R15_UPPER_REGNUM): Define.
	(S390_NUM_REGS): Redefine to include upper half registers.
	(S390_PC_REGNUM, S390_CC_REGNUM): Remove.
	(S390_NUM_PSEUDO_REGS, S390_NUM_TOTAL_REGS): Likewise.
	(tdesc_s390_linux32): Add declaration.
	(tdesc_s390_linux64): Likewise.
	(tdesc_s390x_linux64): Likewise.

2010-01-04  Ulrich Weigand  <uweigand@de.ibm.com>

	* regset.h (struct core_regset_section): Add HUMAN_NAME.
	* i386-linux-tdep.c (i386_linux_regset_sections): Fill in HUMAN_NAME.
	* ppc-linux-tdep.c (ppc_linux_vsx_regset_sections): Likewise.
	(ppc_linux_vmx_regset_sections): Likewise.
	(ppc_linux_fp_regset_sections): Likewise.

	* corelow.c (get_core_register_section): Constify arguments.
	(get_core_registers): Use gdbarch_core_regset_sections instead
	of hard-coded platform-specific register section names.

2010-01-04  Ulrich Weigand  <uweigand@de.ibm.com>

	* dwarf2loc.c (read_pieced_value): If a piece occupies part of
	a register, assume the least-significant part is used.
	(write_pieced_value): Likewise.

2010-01-04  Ulrich Weigand  <uweigand@de.ibm.com>

	* printcmd.c: Include "arch-utils.h".
	(do_one_display): Re-parse expression if current architecture changed.

2010-01-03  Jan Kratochvil  <jan.kratochvil@redhat.com>
	    Joel Brobecker  <brobecker@adacore.com>

	* gdbtypes.c (check_typedef): New comment on type length.
	* value.c (allocate_value_lazy): Remove the unused atype variable.  New
	comment on type length.
	(value_primitive_field): Keep the original TYPE value, new comment.

2010-01-01  Jan Kratochvil  <jan.kratochvil@redhat.com>

	* cli/cli-script.c (process_next_line): Rename p1 as p_end and p2 as
	p_start.  Change != comparisons to > and < comparisons.

2010-01-01  Jan Kratochvil  <jan.kratochvil@redhat.com>

	* cli/cli-script.c (process_next_line): Check P2 overrun.

2009-01-01  Joel Brobecker  <brobecker@adacore.com>

	Update the copyright hearder to add year 2010 for most GDB files.

2009-01-01  Joel Brobecker  <brobecker@adacore.com>

	Fix build failure in inf-ptrace.c.
	* inf-ptrace.c (inf_ptrace_follow_fork): Fix typo.

2010-01-01  Joel Brobecker  <brobecker@adacore.com>

	* top.c (print_gdb_version): Update copyright year.

2010-01-01  Joel Brobecker  <brobecker@adacore.com>

	Fix break *FUN'address thread NUM.
	* ada-lex.l (task): Expand rule to also match the thread keyword.

2010-01-01  Joel Brobecker  <brobecker@adacore.com>

	Fix break *FUN'address task NUM.
	* ada-lex.l (task): New rule.
	* ada-lang.c (valid_task_id): Make sure the Ada task list has
	been built before using it.

For older changes see ChangeLog-2009.

Local Variables:
mode: change-log
left-margin: 8
fill-column: 74
version-control: never
coding: utf-8
End:
